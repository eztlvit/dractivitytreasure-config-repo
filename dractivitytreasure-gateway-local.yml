spring:
  cloud:
    loadbalancer:
        retry: 
            enabled: true
  http:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
    multipart:
      enabled: true
      max-request-size: 50MB
      max-file-size: 50MB
  # sleuth:
    # sampler:
      # percentage: 1.0
    # web:
      # skipPattern: (^cleanup.*)
  # zipkin: 
    # baseUrl: http://192.168.54.14:8020/
    # locator:
      # discovery:
        # enabled: true
zuul:
  prefix: /
  host:
    socket-timeout-millis: 8000
    connect-timeout-millis: 8000
  forceOriginalQueryStringEncoding: true
  routes:
    uac-route:
      path: /uac/**
      sensitiveHeaders:
      # strip-prefix: false
      service-id: dractivitytreasure-provider-uac
    amc-route:
      path: /amc/**
      sensitiveHeaders:
      service-id: dractivitytreasure-provider-amc
  add-proxy-headers: true
  add-host-header: true

#相应的字符的连接和请求超时设置
dractivitytreasure-provider-uac:
  ribbon:
    eager-load:
      enabled: true
    MaxAutoRetries: 1
    MaxAutoRetriesNextServer: 2
    OkToRetryOnAllOperations: true
    ConnectTimeout: 8000
    ReadTimeout: 80000

# ReadTimeout
# 指的是建立连接后从服务器读取到可用资源所用的时间。
# 在这里我们可以这样理解ReadTimeout：正常情况下，当我们发出请求时可以收到请求的结果，也就是页面上展示的内容，
# 但是当网络状况很差的时候，就会出现页面上无法展示出内容的情况。
# 另外当我们使用爬虫或者其他全自动的程序时，无法判断当前的网络状况是否良好，
# 此时就有了ReadTimeout的用武之地了，通过设置ReadTimeout参数，
# 例：ReadTimeout=5000，超过5秒没有读取到内容时，就认为此次读取不到内容并抛出Java.net.SocketException: read time out的异常。

# ConnectTimeout
# 指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间。
# 在java中，网络状况正常的情况下，例如使用HttpClient或者HttpURLConnetion连接时设置参数connectTimeout=5000即5秒，
# 如果连接用时超过5秒就是抛出java.net.SocketException: connetct time out的异常。  
dractivitytreasure-provider-amc:
  ribbon:        
    eager-load:
      enabled: true
    MaxAutoRetries: 1
    MaxAutoRetriesNextServer: 2
    OkToRetryOnAllOperations: false
    ConnectTimeout: 8000
    ReadTimeout: 80000


security:
  oauth2:
    client:
      clientId: dractivitytreasure-client-gateway
      clientSecret: dractivitytreasureClientSecret
      access-token-uri: http://dractivitytreasure-gateway:7979/uac/oauth/token
      user-authorization-uri: http://dractivitytreasure-gateway:7979/uac/oauth/authorize
    resource:
      user-info-uri: http://dractivitytreasure-gateway:7979/uac/user/current
      prefer-token-info: false
      jwt:
        key-uri: http://dractivitytreasure-provider-uac:8000/oauth/token_key

proxy:
  auth:
    routes:
      uac-route: oauth2
      mdc-route: oauth2

dractivitytreasure:
  enableSqlLogInterceptor: false
  oauth2:
    jwtSigningKey: dractivitytreasure
    client:
      id: ${security.oauth2.resource.id}
      accessTokenUrl: ${security.oauth2.client.access-token-uri}
      clientId: ${security.oauth2.client.clientId}
      clientSecret: ${security.oauth2.client.clientSecret}
      clientAuthenticationScheme: header
      tokenStore: jwt
# swagger butler配置
swagger.butler:
  api-docs-path: v2/api-docs
  swagger-version: 1.0
  auto-generate-from-zuul-routes: true
# 指定要生成的范围
  generate-routes: omc-route,mdc-route,opc-route,tpc-route,uac-route
# 忽略某些路由生成
#  ignore-routes: